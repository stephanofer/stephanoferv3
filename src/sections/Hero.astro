---
import Link from "@/components/Link.astro";
import LinkCV from "@/components/LinkCV.astro";
import SectionContainer from "@/components/SectionContainer.astro";
import Arrowdown from "@/icons/arrow-down.svg";
import Bag from "@/icons/bag.svg";
import Mouse from "@/icons/mouse.svg";
---

<SectionContainer id="hero">
  <div class="container">
    <div class="title fade-in-element" data-delay="100">
      <h1 class="fade-in-element" data-delay="200">Desarrollador de Soluciones Que impactan y Crecen Contigo</h1>
      <p class="fade-in-element" data-delay="300">
        Con más de un año de experiencia, cubriendo todo el ciclo de vida del
        proyecto, desde la conceptualización hasta la implementación exitosa en
        producción. ✨
      </p>
    </div>
    <div class="buttons fade-in-element" data-delay="400">
      <Link style="green" href="#projects" target="_self">
        <Bag slot="icon-left" />
        ¡Revisar Proyectos!
      </Link>
      <LinkCV style="transparent" position="icon-right" />
    </div>
    <div class="mouse fade-in-element" data-delay="500">
      <Mouse height={30} />
      <Arrowdown class="animated" />
    </div>
  </div>
</SectionContainer>

<style>
  .container {
    height: calc(100vh - 91.5px);
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 2rem;

    @media (width > 1024px) {
      height: calc(100vh - 130px);
    }
  }

  .fade-in-element {
    opacity: 0;
    transform: translate3d(0, 2rem, 0);
    transition: 
      opacity 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94),
      transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    will-change: opacity, transform;
  }

  .fade-in-element.visible {
    opacity: 1;
    transform: translate3d(0, 0, 0);
  }

  @media (prefers-reduced-motion: reduce) {
    .fade-in-element {
      transition: opacity 0.3s ease;
      transform: none;
    }
    
    .fade-in-element.visible {
      transform: none;
    }
  }

  .title {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
  }

  h1 {
    font-family: "Clash";
    font-weight: 600;
    max-width: 21ch;
    text-align: center;
    font-size: var(--fs-xxl);
    line-height: 1;

    background-image: linear-gradient(
      to right,
      rgb(255 255 255 / 50%) 0%,
      rgb(255 255 255 / 70%) 9%,
      rgb(255 255 255 / 100%) 37%,
      rgb(255 255 255 / 100%) 50%,
      rgb(255 255 255 / 100%) 73%,
      rgb(255 255 255 / 24%) 100%
    );
    background-clip: text;
    color: transparent;

    @media (width > 1800px) {
      font-size: var(--fs-xxl);
    }
  }

  p {
    max-width: 70ch;
    text-align: center;
    font-size: var(--fs-base);
    background-image: linear-gradient(to right, #95ecb0 0%, #f3f98a 100%);
    background-clip: text;
    color: transparent;
  }

  .buttons {
    display: flex;
    flex-direction: column;
    justify-content: center;
    margin-bottom: 2rem;
    gap: 1rem;

    @media (width > 1024px) {
      flex-direction: row;
      margin-bottom: 4rem;
      gap: 1.5rem;
    }
  }

  .mouse {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }

  .animated {
    animation: bounce 1s infinite;
  }

  @keyframes bounce {
    0%,
    100% {
      transform: translateY(-25%);
      animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
    }
    50% {
      transform: none;
      animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const heroElements = document.querySelectorAll('#hero .fade-in-element');
    heroElements.forEach((element) => {
      const htmlElement = element as HTMLElement;
      const delay = parseInt(htmlElement.dataset.delay || '0');
      
      requestAnimationFrame(() => {
        setTimeout(() => {
          htmlElement.classList.add('visible');
        }, delay);
      });
    });

    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -5% 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const element = entry.target as HTMLElement;
          const delay = parseInt(element.dataset.delay || '0');
          
          requestAnimationFrame(() => {
            setTimeout(() => {
              element.classList.add('visible');
            }, delay);
          });
          
          observer.unobserve(element);
        }
      });
    }, observerOptions);

    const otherFadeElements = document.querySelectorAll('.fade-in-element:not(#hero .fade-in-element)');
    otherFadeElements.forEach((element) => {
      observer.observe(element);
    });
  });
</script>
