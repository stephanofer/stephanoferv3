---
import Add from "@/icons/add.svg";

import Link from "@/components/Link.astro";
import AstroIcon from "@/icons/astro.svg";
import CssIcon from "@/icons/css.svg";
import Github from "@/icons/github.svg";
import HtmlIcon from "@/icons/html.svg";
import NestJSIcon from "@/icons/nestjs.svg";
import PrismaIcon from "@/icons/prisma.svg";
import ReactIcon from "@/icons/react.svg";
import SentryIcon from "@/icons/sentry.svg";
import TailwindIcon from "@/icons/tailwind.svg";
import TypeScriptIcon from "@/icons/typescript.svg";
import Web from "@/icons/web.svg";
import WorkersIcon from "@/icons/workers.svg";
import TechnologyPill from "./TechnologyPill.astro";

interface Props {
  title: string;
  description: string;
  image: string;
  technologies: string[];
  github?: string;
  demo?: string;
  publishDate: Date;
  status: string;
  imageAlt: string;
}

const {
  title,
  description,
  image,
  publishDate,
  status,
  technologies,
  demo,
  github,
  imageAlt,
} = Astro.props;

const iconMap: Record<string, any> = {
  react: {
    icon: ReactIcon,
    name: "React",
  },
  astro: {
    icon: AstroIcon,
    name: "Astro",
  },
  html: {
    icon: HtmlIcon,
    name: "HTML5",
  },
  css: {
    icon: CssIcon,
    name: "CSS3",
  },
  workers: {
    icon: WorkersIcon,
    name: "Workers",
  },
  nestjs: {
    icon: NestJSIcon,
    name: "NestJS",
  },
  typescript: {
    icon: TypeScriptIcon,
    name: "TypeScript",
  },
  prisma: {
    icon: PrismaIcon,
    name: "Prisma",
  },
  sentry: {
    icon: SentryIcon,
    name: "Sentry",
  },
  tailwind: {
    icon: TailwindIcon,
    name: "Tailwind CSS",
  },
};
---

<div class="container">
  <Add class="corner corner-top-left" width={14} height={14} />
  <Add class="corner corner-top-right" width={14} height={14} />
  <Add class="corner corner-bottom-left" width={14} height={14} />
  <Add class="corner corner-bottom-right" width={14} height={14} />
  <div class="container-image">
    {image && <img src={image} alt={imageAlt} />}
  </div>
  <div class="container-description">
    <h3>{title}</h3>
    <span>{description}</span>
    <div
      class:list={["technologies", technologies.length > 3 ? "has-more" : ""]}
    >
      {
        technologies.slice(0, 3).map((tech) => {
          const techInfo = iconMap[tech.toLowerCase()];

          return techInfo ? (
            <TechnologyPill>
              <techInfo.icon width={16} height={16} slot="icon" />
              {techInfo.name}
            </TechnologyPill>
          ) : null;
        })
      }
      {
        technologies.length > 3 && (
          <TechnologyPill>{`+${technologies.length - 3}`}</TechnologyPill>
        )
      }
    </div>
    <div class="buttons" class:list={[!demo ? "without-demo" : ""]}>
      {
        github && demo && (
          <a
            href={github}
            class="code"
            target="_blank"
            rel="noopener noreferrer"
          >
            Revisar Código
          </a>
        )
      }

      <Link href={demo || github}>
        {
          demo ? (
            <Web slot="icon-right" width={16} height={16} />
          ) : (
            <Github slot="icon-right" width={16} height={16} />
          )
        }
        {demo ? "¡Demo!" : "Código"}
      </Link>
    </div>
  </div>
</div>

<style>
  .container {
    display: flex;
    flex-direction: column;
    align-items: center;

    border: 2px solid #191919;
    border-style: dotted;
    padding: 0.1rem;
    position: relative;
    overflow: visible;

    /* Hover effect - Lift with subtle glow */
    transition:
      transform 400ms cubic-bezier(0.34, 1.56, 0.64, 1),
      box-shadow 400ms cubic-bezier(0.34, 1.56, 0.64, 1),
      border-color 400ms ease;
    will-change: transform, box-shadow;
  }

  .container:hover {
    transform: translateY(-8px) scale(1.01);
    box-shadow:
      0 20px 40px rgba(0, 0, 0, 0.4),
      0 0 0 1px rgba(255, 255, 255, 0.05),
      0 0 60px rgba(78, 255, 171, 0.15);
    border-color: rgba(78, 255, 171, 0.3);
  }

  @media (prefers-reduced-motion: reduce) {
    .container {
      transition: box-shadow 200ms ease;
    }
    .container:hover {
      transform: none;
    }
  }

  .corner {
    position: absolute;
    z-index: 10;
    transition:
      transform 500ms cubic-bezier(0.34, 1.56, 0.64, 1),
      opacity 300ms ease;
  }

  .container:hover .corner {
    transform: rotate(90deg) scale(1.2);
    opacity: 0.8;
  }

  .corner-top-left {
    top: -7px;
    left: -7px;
  }

  .corner-top-right {
    top: -7px;
    right: -7px;
  }

  .corner-bottom-left {
    bottom: -7px;
    left: -7px;
  }

  .corner-bottom-right {
    bottom: -7px;
    right: -7px;
  }

  .container-image {
    width: 100%;
    height: 250px;
    overflow: hidden;
    position: relative;

    @media (width > 1024px) {
      height: 350px;
    }
  }

  .container-image::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      rgba(78, 255, 171, 0) 0%,
      rgba(78, 255, 171, 0.08) 100%
    );
    opacity: 0;
    transition: opacity 500ms cubic-bezier(0.4, 0, 0.2, 1);
    pointer-events: none;
  }

  .container:hover .container-image::after {
    opacity: 1;
  }

  img {
    width: 100%;
    height: 100%;
    /* object-fit: scale-down; */
    /* object-position: center; */
    transition: transform 600ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  .container:hover img {
    transform: scale(1.05);
  }

  .container-description {
    padding: 1rem;
  }

  h3 {
    font-family:
      "Clash",
      system-ui,
      -apple-system,
      sans-serif;
    font-weight: 600;
    font-size: var(--fs-md);
    line-height: 1.3;
    letter-spacing: -0.02em;
    margin-bottom: 1rem;
    word-wrap: break-word;
    hyphens: auto;
    cursor: default;
    transition:
      color 300ms ease,
      transform 300ms cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  .container:hover h3 {
    color: var(--primary);
    transform: translateX(4px);
  }

  @media (prefers-reduced-motion: reduce) {
    .container:hover h3 {
      transform: none;
    }
  }

  span {
    font-size: var(--fs-base);
    color: var(--color-text);
    display: block;
    margin-bottom: 1rem;
    max-width: 45ch;
    line-height: 1.6;
    letter-spacing: -0.01em;
    word-wrap: break-word;
    hyphens: auto;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  .technologies {
    display: flex;
    flex-wrap: wrap;
    gap: 0.8rem;
  }

  .has-more {
    background-color: var(--foreground);
    color: white;
    gap: 0.3rem;
  }

  .tech-badge {
    color: var(--foreground);
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: var(--fs-sm);
    font-weight: 500;
    color: white;
    line-height: 1.4;
    letter-spacing: 0.02em;
  }

  .buttons {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    margin-top: 1.5rem;
  }

  .without-demo {
    justify-content: end;
  }

  .code {
    color: var(--color-text);
    font-size: var(--fs-sm);
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-underline-offset: 3px;
    transition:
      color 250ms ease,
      text-decoration-thickness 250ms ease,
      transform 300ms cubic-bezier(0.34, 1.56, 0.64, 1);
    line-height: 1.5;
    letter-spacing: 0.01em;
    display: inline-block;
    position: relative;

    &:hover {
      color: var(--primary);
      text-decoration-thickness: 2px;
      transform: translateX(-2px);
    }

    &::before {
      content: "";
      position: absolute;
      left: -8px;
      top: 50%;
      transform: translateY(-50%) translateX(-4px);
      width: 4px;
      height: 4px;
      background: var(--primary);
      border-radius: 50%;
      opacity: 0;
      transition:
        opacity 300ms ease,
        transform 300ms cubic-bezier(0.34, 1.56, 0.64, 1);
    }

    &:hover::before {
      opacity: 1;
      transform: translateY(-50%) translateX(0);
    }
  }
</style>
